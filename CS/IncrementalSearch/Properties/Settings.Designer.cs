// Developer Express Code Central Example:
// How to add Incremental Search into GridControl
// 
// This example demonstrates how to add Incremental Search into GridControl.
// 
// Our
// GridControl doesn't have Incremental Search. To provide this functionality, we
// subscribe to the GridControl's PreviewTextInput event. When PreviewTextInput is
// raised, we add the entered value to a searching string. Then, we iterate through
// all cells in a selected column. If a cell value starts with the searching
// string, we remember a row handle of this cell. To move to the previous or next
// row that starts with the searching string, we iterate through all previous or
// next cells of the current column and change the FocusedRowHandle value to a row
// handle of a found cell. To highlight the matching string of a cell, we cast
// InplaceBaseEdit to the InplaceBaseEdit interface and set the HighlightedText
// property to the searching string value.
// 
// You can find sample updates and versions for different programming languages here:
// http://www.devexpress.com/example=T163003

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IncrementalSearch.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
